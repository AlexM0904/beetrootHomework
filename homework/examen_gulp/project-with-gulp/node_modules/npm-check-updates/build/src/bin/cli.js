#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = __importDefault(require("commander"));
const lodash_1 = __importDefault(require("lodash"));
const update_notifier_1 = __importDefault(require("update-notifier"));
const index_1 = __importDefault(require("../index"));
const package_json_1 = __importDefault(require("../../package.json"));
const cli_options_1 = __importDefault(require("../cli-options"));
const getNcuRc_1 = __importDefault(require("../lib/getNcuRc"));
// check if a new version of ncu is available and print an update notification
const notifier = (0, update_notifier_1.default)({ pkg: package_json_1.default });
if (notifier.update && notifier.update.latest !== package_json_1.default.version) {
    notifier.notify({ defer: false, isGlobal: true });
}
// manually detect option-specific help
// https://github.com/raineorshine/npm-check-updates/issues/787
const rawArgs = process.argv.slice(2);
if (rawArgs.includes('--help') && rawArgs.length > 1) {
    const nonHelpArgs = rawArgs.filter(arg => arg !== '--help');
    nonHelpArgs.forEach(arg => {
        const option = cli_options_1.default.find(({ long }) => `--${long}` === arg);
        if (option) {
            console.log(`Usage: ncu --${option.long}`);
            if (option.short) {
                console.log(`       ncu -${option.short}`);
            }
            if (option.default !== undefined && !(Array.isArray(option.default) && option.default.length === 0)) {
                console.log(`